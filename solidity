// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.5.0 <0.9.0;

contract EventContract {
    struct Event {
        address organizer;
        string name;
        uint date;
        uint price;
        uint ticketCount;
        uint ticketRemaining;
    }
  
    mapping(uint => Event) public events; //create for ultiple event//
    mapping(address => mapping(uint => uint)) public tickets;
    uint public nextId;

    function createEvent(string calldata name, uint date, uint price, uint ticketCount) public {
        require(block.timestamp < date, "You cannot create an event for a past date");
        require(ticketCount > 0, "Ticket count must be greater than 0");
        events[nextId] = Event(msg.sender, name, date, price, ticketCount, ticketCount);
        nextId++;
    }

    function buyTicket(uint id, uint quantity) public payable {
        require(events[id].date != 0, "Event does not exist");
        require(events[id].date > block.timestamp, "Event has ended");
        Event storage _event = events[id];
        require(msg.value == (_event.price * quantity), "Ether sent is not enough");
        require(_event.ticketRemaining >= quantity, "Not enough tickets left");
       
       _event.ticketRemaining -= quantity;
        tickets[msg.sender][id] += quantity;
    }
